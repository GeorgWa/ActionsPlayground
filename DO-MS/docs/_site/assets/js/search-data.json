{
  "1": {
    "id": "1",
    "title": "DO-MS Examples",
    "content": "Examples of DO-MS Reports Bellow are links to example DO-MS Reports Isobaric carrier optimization SCoPE2",
    "url": "http://localhost:4000/docs/DO-MS_examples",
    "relUrl": "/docs/DO-MS_examples"
  },
  "2": {
    "id": "2",
    "title": "Adding Input Folders",
    "content": "Adding Input Folders Importing data in DO-MS is done by selecting one or more folders that correspond to the “txt” output from a MaxQuant search. The folder table starts out empty, and only when folders are added to the table can you select them for import and analysis. Begin adding a folder by clicking on the “Add Folder” button above the folder table. Then add the path of your folder into the textbox, as shown: A folder path is the folder’s absolute location on your machine. On Windows, you can get the folder path by navigating to it in Explorer, clicking on the top file path bar, and copying the resulting text with Ctrl+C. On Mac/OSX, you can get the folder path by right clicking on the folder at the bottom of the Finder application and hitting “Copy &lt;folder&gt; as pathname”. Paths must be absolute and start from the root of the filesystem. For Windows, this means starting from the disk (“C: ”, “D: ”, etc). For Mac OS/Linux, this means starting from the filesystem root (“/”). Also note that path separators are platform specific (“ ” for Windows, “/” for Mac OS/Linux) Adding subfolders Instead of adding one folder at a time, you can select a parent folder and select either “Add Child Folders” or “Add Recursively”. “Add Child Folders” only adds folders that are directly below the folder in the Folder Path textbox. “Add Recursively” adds all folders below the one specified, no matter how many levels below they are. Next Steps Press the confirm button when you are finished entering in the folder path and optionally adding subfolders. The folder table should now populate with your selected folder(s). Click on a row or multiple rows to select them, and then scroll down to select file(s) and finally to start the import process.",
    "url": "http://localhost:4000/docs/adding-folders",
    "relUrl": "/docs/adding-folders"
  },
  "3": {
    "id": "3",
    "title": "Automating Report Generation",
    "content": "Automating Report Generation Automated report generation is available via. the do-ms_cmd.R script. To generate a report, simply run: Rscript do-ms_cmd.R config_file.yaml Configuration file The configuration file is specified in the YAML file format. An annotated example can be found here All files specified under input_files must be specified in global.R as part of the available input file list. If you’re using custom modules, or using a different search engine, please update the list in global.R first. For the fields include_files, exclude_files, pep_thresh, remove_decoy, and remove_contam, if you don’t wish to apply these filters, simply comment out the line in the config file by appending with the # character. Experiment short names specified in exp_names are applied after filtering, i.e., to the list of raw files that survive the user-specified filters. If too few/too many names are listed, the program will assign them or ignore them accordingly. A map of short names to raw files can be outputted as a module. Command-line arguments Some, but not all, of the fields in the configuration file can also be specified via. the command line. This is useful for automated pipelines where programatically editing the config file would be problematic. View the available arguments by running Rscript do-ms_cmd.R -h Adding more options via. the command-line can be done by editing the beginning of the do-ms_cmd.R script. Or, open a GitHub issue.",
    "url": "http://localhost:4000/docs/automation",
    "relUrl": "/docs/automation"
  },
  "4": {
    "id": "4",
    "title": "Building Your Own Modules",
    "content": "Building your own modules DO-MS is designed to allow easy customization to in-house proteomics workflows through a modular plotting and data display system. Modules are a type of data display, such as plots, tables, and text. Write your code once in the module format, apply it automatically to different datasets, and get consistent data display through the web interface or generated reports. Table of Contents Tabs Tab Organization Removing Tabs Modules Module Organization Removing Modules Module Types plot table datatable text Module Structure Metadata Fields Functions Additional Options (Web Interface) Additional Options (Plot Type) Additional Options (Datatable Type) Tabs Modules are organized and grouped together through tabs, which are named folders under the modules/ folder. $ ls modules 005_Summary 010_Chromatography 020_Instrument_Performance ... Tab Organization Tabs are sorted alphabetically, so numerical prefixes to folder names allow for custom ordering of tabs, as done with the base set of tabs. When displaying the tab name in the interface/report, numerical prefixes are removed and the _ character is replaced with a space. Removing Tabs Deleting the tab folder will remove the tab and all of its child modules. Tabs can be “commented out” by appending the folder name with two underscores, like so: __090_Hidden_Tab/. Modules Each module is its own .R file inside of a tab. The contents of the module are described below, and annotated, example modules can be found in the examples/ folder. You can also use the base set of modules as a reference to build your own. Module Organization Modules are displayed alphabetically in both the web interface and report. Numerical prefixes to the module file name allow for custom ordering, in the same system for tabs described above. Unlike tabs, module names are specified inside the file and are not derived from the file name. Removing Modules Deleting a module will remove it. If you want to keep it without displaying it, you can “comment out” similar to tabs, by appending the module file name with two underscores like so: __hide_this_module.R Module Types Modules can render into a variety of display types. Current options are listed below, but more are upcoming. plot Render a plot image. The plot function should return a ggplot object or a vanilla R plot object recorded with the recordPlot() function. table Render a static table. The plot function should return a matrix or datatable datatable The same as the table type, except in the web interface and HTML report this table is displayed as a DataTable which allows searching, reordering, etc. More details on DataTables can be found here https://datatables.net/reference/index. text Render a string. The plot function should return a string. Newlines should be done with two newline characters ( n n) instead of one for proper display. Module Structure Each module file specifies a function init() that takes in no arguments, and returns a list that provides both metadata about the module and function definitions that give the module its functionality. Metadata Fields type Module type, as described above. box_title The name of the module, as displayed on the web interface and report help_text Description of the module, shown in the web interface and documentation tab source_file Description of the file(s) used for this module, displayed in the documentation tab Functions validate_func(data, input) Function to validate whether or not the data required for this module is loaded. All implementations use shiny’s validate function internally. plotdata_func(data, input) Function to generate filtered and modified data to be used for display. Returns data, usually in tabular form. This is the data that will be given to the user when clicking the “Download Data” button in the interface plot_func(data, input) Function to generate a display object (plot, table, text) from the plotdata function. Additional Options (web interface) box_width Width of the box in bootstrap column units (1-12, where 12 is the full page width). box_height Height of the box in pixels. By default the box height is the height of the plot object, or 400px if the display type is not a plot. Additional Options (plot type) dynamic_width Value, in pixels, of the width of each experiment in the plot. For plots such as the vertical histograms used in the base set of DO-MS plots need to scale horizontally with the number of experiments. dynamic_width_base Value, in pixels, of the base width of a plot using the dynamic width. Useful for plots with elements taking up a fixed amount of horizontal space – e.g., legends. plot_height Height, in pixels, of the plot. Default is 370px. Will also scale the box height, unless it is also user-defined. report_plot_width Width, in inches, of the plot in the generated report. Defaults to a global report plot width, which is by default 5 inches. report_plot_height Height, in inches, of the plot in the generated report. Defaults to a global report plot height, which is by default 5 inches. Additional Options (datatable type) datatable_options A list of parameters to pass to DataTables. For example: datatable_options=list( pageLength=10, dom=&#39;lfptp&#39;, lengthMenu=c(5, 10, 15, 20, 50) ) More details can be found in the R DT interface, https://rstudio.github.io/DT/ and on the DataTables reference page https://datatables.net/reference/option/.",
    "url": "http://localhost:4000/docs/build-your-own",
    "relUrl": "/docs/build-your-own"
  },
  "5": {
    "id": "5",
    "title": "Getting Started",
    "content": "Getting Started DO-MS can be run either from the command-line or as interactive application. Follow the links below to get started using the implementation of your choice. For more details on the data display, read the DO-MS article.",
    "url": "http://localhost:4000/docs/getting-started",
    "relUrl": "/docs/getting-started"
  },
  "6": {
    "id": "6",
    "title": "Interactive Application",
    "content": "Getting Started – Interactive DO-MS Application DO-MS is an application to visualize mass-spec data both in an interactive application and static reports generated via. the command-line. In this document we’ll walk you through analyzing an example dataset in the interactive application. Table of Contents Example Data Installation Data Import Adding Folders Renaming Experiments Subsetting Experiments Interacting with Modules Generate Report Example Data We have provided an example data set online, SQC68, which was used for the Apex Offset figure in the DO-MS paper. You can download a .zip bundle of it here: https://drive.google.com/open?id=1hcWDtnD9MzTZbF-qc0rGEFUBZgtlEQTv. The contents of the archive are some of the outputs of the txt folder from a MaxQuant search. The only constraint for data in DO-MS is that it must be from MaxQuant version &gt;= 1.6.0.16. Installation Download the application via. a zip or tar archive from the GitHub release page. Unzip the archive, and then open the DO-MS.Rproj to load the project into RStudio To start the app open server.R in RStudio and on the top right corner of the editor click on the “Run App” button. To run the application in your browser (preferred option) rather than in RStudio, click the dropdown menu and select “Run External”. Data Import Adding Folders DO-MS is designed to load folders of analyses rather than individual files. To allow quick access to your analyses, as well as to allow analyzing multiple searches simultaneously, DO-MS provides a searchable “folder table” for all of your analyses. To begin, we must first add some MaxQuant searches to the table. Start by clicking the “Add Folder” button at the top of the table Then add the path of your folder into the textbox, as shown: A folder path is the folder’s absolute location on your machine. On Windows, you can get the folder path by navigating to it in Explorer, clicking on the top file path bar, and copying the resulting text with Ctrl+C. On Mac/OSX, you can get the folder path by right clicking on the folder at the bottom of the Finder application and hitting “Copy &lt;folder){: width=”70%” .center-image} as pathname”. Note that in the example above we checked “Add Single Folder” to add just the folder path we pasted in. If for example, you have a folder that contains many MaxQuant searches, you can select “Add Child Folders” to add all subfolders of the path specified, or “Add Recursively” to add all folders that are below the path specified. Click “Confirm” and now you should see your folder added to the folder table Click on the folder in the table to select it. When you have multiple folders loaded into the table you can select more than one. On the right the status bar will indicate which folders have been selected. Finally, load the files from the selected folders by scrolling down and clicking on the big “Load Data” button Depending on how large your files are, this may take a while. A progress bar on the bottom-right corner indicates the status of the import process. Renaming Experiments An important aspect of data visualization is easy-to-read labels for your experiments. DO-MS provides an accessible interface for renaming your raw file names so that generated figures will be easier to interpret. Once your data is loaded, scroll down to the “Renaming Experiments” section. Here you will find a table of your loaded raw files and their associated “labels” that will be used when plotting. In the picture above the experiment labels are pretty long and contain a lot of unnecessary text. We can quickly change the format of all experiment labels by modifying the format which generates them. Scroll up slightly to the “Experiment Label Format” form to see how it was generated. This format string is similar to a format string other programming languages, where the special characters %f, %i, and %e are replaced by raw file-specific strings. Since all of the raw files in the picture above come from the same search folder, we can change the format string to %e to have the label mirror the raw file name. Press apply to confirm the change. Now in the experiment renaming table below we can see the updated experiment labels. The labels are still pretty verbose though, and the portions of the raw file that indicate the date and type are not as important and the end of the raw file. We can further edit all the labels with a regular expression, as defined in the “Experiment Extraction Pattern” form above the table. We can choose to extract the end of each raw file by providing a matching pattern. For example, the pattern below, SQC68[A-Z]{1}[0-9]{1} matches the string “SQC68”, plus one of any capital letter, and then one of any number. Click “Apply” to confirm the changes Our extraction expression resulted in a duplicate label, which was resolved automatically by appending _1 and _2 to the duplicate labels. We can also edit the labels directly in the table. To explicitly name the duplicate, for example, click on the label entry in the table to access a text form to rename the label manually. Once you are done editing, click anywhere outside of the table to save your changes. Subsetting Experiments If we only wanted to look at, for example, SQC68D1, D2, and D3, we can choose to only plot those 3 experiments. In the sidebar, click on the white box below “Select Experiments to Display” to show which experiments are currently being plotted. By default, all are selected. Click on “Deselect all” to un-select all experiments, and then click on SQC68D1, SQC68D2, and SQC68D3 to select just those 3 experiments. Now in our plots only these 3 experiments are shown Interacting with Modules Each module has a short description that can be accessed by hovering over the question mark icon next to the module title. You can also download the module plot as a PNG or PDF, by clicking on the download buttons below each module plot. The image for each module can also be saved as-is by right clicking on the image and downloading it directly You can also download the underlying data used for the plot by clicking on the “Download Data” button. This tab-delimited file can be imported into many other visualization packages. Generate Report Click on “Generate Report” in the sidebar to access the report generation page. Here you will find some options to customize your report. While we support PDF reports and PDF images, we strongly recommend that you generate your reports in HTML format with PNG image plots. Other configurations may result in graphical glitches or unwanted behavior. In addition we recommend that you check your pandoc installation (more details here) as any issues will prevent the report generation. Click the “Download Report” button to begin generating the report. This takes a while as all plots have to be remade. A progress bar at the bottom of the page informs you of the progress. For the impatient, RStudio also prints some informative output and lets you exactly which plot it’s working on Your report should download to your default download location. All images in the report are embedded in the markup, so feel free to share this single file to your colleagues/collaborators and don’t worry about having to include anything else.",
    "url": "http://localhost:4000/docs/getting-started-application",
    "relUrl": "/docs/getting-started-application"
  },
  "7": {
    "id": "7",
    "title": "Command Line",
    "content": "Getting Started – DO-MS Command Line DO-MS can be run from the command-line to generate reports. Insert DO-MS into your own automated proteomics workflow to get hands-free, easily shareable generated reports. Table of Contents Example Data do-ms_cmd.R Configuration File Command-line Arguments Example Data We have provided an example data set online, SQC68, which was used for the Apex Offset figure in the DO-MS paper. You can download a .zip bundle of it here: https://drive.google.com/open?id=1hcWDtnD9MzTZbF-qc0rGEFUBZgtlEQTv. The contents of the archive are some of the outputs of the txt folder from a MaxQuant search. The only constraint for data in DO-MS is that it must be from MaxQuant version &gt;= 1.6.0.16. do-ms_cmd.R The entry point for the command-line report generation is do-ms_cmd.R. To begin run this directly as an executable or with the Rscript program. Windows: Rscript.exe do-ms_cmd.R Linux/Mac OS: $ Rscript do-ms_cmd.R If you are having trouble getting Rscript to run, please see the Rscript section on the Known Issues Wiki page for more details. Running do-ms_cmd.R alone should give the following usage help text: usage: do-ms_cmd.R [-h] [-v] [-i INPUT_FOLDERS [INPUT_FOLDERS ...]] [-o OUTPUT] [-f LOAD_INPUT_FILES [LOAD_INPUT_FILES ...]] [--include-files INCLUDE_FILES] [--exclude-files EXCLUDE_FILES] [--exp_names EXP_NAMES [EXP_NAMES ...]] [--pep_thresh PEP_THRESH] config_file do-ms_cmd.R: error: the following arguments are required: config_file Configuration File The command-line DO-MS uses a configuration file to apply all of the various settings used for the report generation. Many but not all of these settings are analogous to the fields in the interactive application. An annotated configuration file describing each of the fields is given in the examples folder as config_file.yaml. For the example data, we also provide a config file, config_sqc68.yaml. You may need to change the paths for both the input folder and output file, but the rest of the settings can be kept as-is. Run DO-MS with the example configuration file with: $ Rscript do-ms_cmd.R example/config_sqc68.yaml ... Output created: ~/Downloads/SQC68_DO-MS_report.html [1] &quot;Report written to: ~/Downloads/SQC68_DO-MS_report.html&quot; [1] &quot;Done!&quot; An example generated report using this configuration file is available online here: https://drive.google.com/open?id=1SKB639JXFIk-rOAMA1vBXaxyheQv9-bu Command-line Arguments As displayed in the usage text, many settings can be passed to do-ms_cmd.R via. the command-line rather than via. the configuration file. This is useful for workflows that want to change inputs/outputs but are incapable/unwilling to create a new configuration file for each run. Command-line arguments will also override any setting in the configuration file. $ Rscript do-ms_cmd.R example/config_sqc68.yaml -i ~/Downloads/example_data_SQC68 -o ~/Downloads/SQC68_DO-MS_report.html --include-files SQC68D[1-3] --exp_names &quot;250ms IT&quot; &quot;500ms IT&quot; &quot;1000ms IT&quot; ... Output created: ~/Downloads/SQC68_DO-MS_report.html [1] &quot;Report written to: ~/Downloads/SQC68_DO-MS_report.html&quot; [1] &quot;Done!&quot;",
    "url": "http://localhost:4000/docs/getting-started-command-line",
    "relUrl": "/docs/getting-started-command-line"
  },
  "8": {
    "id": "8",
    "title": "Hosting as a Server",
    "content": "Hosting as a Server This application requires a large amount of computational power (CPU), on-hand memory (RAM), and possibly the storage of large amounts of mass-spec data (Storage), so make sure your server has enough resources. We recommend using a desktop computer as a server, as opposed to hosting on a cloud server. Internal (Organizational) Usage If you wish to host a server for internal usage, i.e., within an organizational intranet, you can change the host IP to “0.0.0.0” instead of “127.0.0.1”, which exposes the server outside of the machine itself. Public Access It is not recommended to upload this application to the shinyapps.io host as this program requires a lot of bandwidth and it may quickly overrun the quotas of the free account. This server can instead be run locally on a powerful desktop machine, and then made available publicly using a reverse-proxy, such as ngrok or frp. This solution requires a web server to set up the forwarding.",
    "url": "http://localhost:4000/docs/hosting-as-server",
    "relUrl": "/docs/hosting-as-server"
  },
  "9": {
    "id": "9",
    "title": "Home",
    "content": "DO-MS Data-Driven Optimization of Mass Spectrometry Methods Get started now Download JPR Article GitHub Repository Aim of DO-MS The performance of ultrasensitive liquid chromatography and tandem mass spectrometry (LC-MS/MS) methods, such as single-cell proteomics by mass spectrometry, depends on multiple interdependent parameters. This interdependence makes it challenging to specifically pinpoint the sources of problems in the LC-MS/MS methods. For example, a low signal at the MS2 level can be due to poor LC separation, ionization, apex targeting, ion transfer, or ion detection. DO-MS aims to specifically diagnose such problems by interactively visualizing data from all levels of bottom-up LC-MS/MS analysis. Getting Started Please read our detailed getting started guides: Getting started on the application Getting started on the command-line Requirements This application has been tested on R &gt;= 3.5.0, OSX 10.14 / Windows 7/8/10. R can be downloaded from the main R Project page or downloaded with the RStudio Application. All modules are maintained for MaxQuant &gt;= 1.6.0.16. The application suffers from visual glitches when displayed on unsupported older browsers (such as IE9 commonly packaged with RStudio on Windows). Please use IE &gt;= 11, Firefox, or Chrome for the best user experience. Installation Install this application by downloading it from the release page. Running The easiest way to run the app is directly through RStudio, by opening the DO-MS.Rproj Rproject file and clicking the “Run App” button at the top of the application, after opening the server.R file. We recommend checking the “Run External” option to open the application in your default browser instead of the RStudio Viewer. You can also start the application by running the start_server.R script. Automated Report Generation You can automatically generate PDF/HTML reports without having to launch the server by running the do-ms_cmd.R script, like so: $ Rscript do-ms_cmd.R config_file.yaml This requires a configuration file, and you can find an example one here. See Automating Report Generation for more details and instructions. Customization DO-MS is designed to be easily user-customizable for in-house proteomics workflows. Please see Building Your Own Modules for more details. Hosting as a Server Please see Hosting as a Server for more details. Search Engines Other Than MaxQuant This application is currently maintained for MaxQuant &gt;= 1.6.0.16. Adapting to other search engines is possible but not provided out-of-the-box. Please see Integrating Other Search Engines for more details. Can I use this for Metabolomics, Lipidomics, etc… ? While the base library of modules are based around bottom-up proteomics by LC-MS/MS, this project is fundamentally compatible with any delimited text files (CSV, TSV, etc). These implementations will require some programming work, but once it is done DO-MS gives you a extensible framework that can be used over-and-over again to generate shareable reports. See Integrating Other Search Engines for more details About the project The manuscript for this tool is published at the Journal of Proteome Research: https://pubs.acs.org/doi/10.1021/acs.jproteome.9b00039 The manuscript is also freely available on bioRxiv: https://www.biorxiv.org/content/10.1101/512152v1. Contact the authors by email: nslavov{at}northeastern.edu. License DO-MS is distributed by an MIT license. Contributing Please feel free to contribute to this project by opening an issue or pull request in the GitHub repository. Data Figures/Analysis Help! For any bugs, questions, or feature requests, please use the GitHub issue system to contact the developers.",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "10": {
    "id": "10",
    "title": "Known Issues",
    "content": "Known Issues Please refer to this document for any issues you encounter during install or usage. If what you have is not listed here, then use the GitHub issue system to contact the developers. R, Rscript issues If running the server with the start_server scripts, then you may run into the following issues: For OSX/Linux, Rscript must be available on the path, and for Windows, you will need to edit the start_server.bat script to point to the specific Rscript.exe executable. If you are having trouble loading shiny, please confirm that you have installed the package in the “Installation” step. If so, then you may need to define a new environment variable, R_LIBS_USER, that points to the library path of your R installation. See this StackOverflow answer for more details on this issue. Rendering/Display issues Some users have reported issues with the package opening within RStudio’s viewer pane, rather than within a separate browser window. Please make sure that you have the appropriate option checked in the dropdown menu of the ‘Run App’ button, if using RStudio. pandoc not found This app uses rmarkdown which in turn uses pandoc to generate HTML/PDF reports. If you are launching this app from RStudio, then pandoc should be provided and should work out of the box. If not, then pandoc needs to be available either via an environment variable RSTUDIO_PANDOC or the system PATH. The application command line start script will attempt to find pandoc from some common paths, but will print a warning if it can’t be found. It is then up to the user to link the binaries, and if RStudio is not installed, to install pandoc themselves. Instructions on how to make pandoc available from an existing RStudio installation can be found here. pandoc can also be installed from its project page",
    "url": "http://localhost:4000/docs/known-issues",
    "relUrl": "/docs/known-issues"
  },
  "11": {
    "id": "11",
    "title": "Related methods",
    "content": "Methods for ultrasensitive mass-spec analysis   Get started now Download JPR Article GitHub Repository DO-MS supports related methods and technologies developed in the Slavov Laboratory. These methods include: Single-Cell ProtEomics by Mass Spectrometry (SCoPE-MS) Single-Cell ProtEomics by Mass Spectrometry (SCoPE2) Data-driven Alignment of Retention Times for IDentification (DART-ID)     Read more about our single-cell proteomics research and the single-cell proteomics conference that we organize.",
    "url": "http://localhost:4000/mass-spec/methods",
    "relUrl": "/mass-spec/methods"
  },
  "12": {
    "id": "12",
    "title": "Adding Search Engines",
    "content": "Integrating Other Search Engines This app was designed for and tested for MaxQuant &gt;= 1.6.0.16. Much of the code is designed around the specific outputs from MaxQuant, such as the column names of the text output files, and the names of the files themselves (evidence.txt, allPeptides.txt, etc). In addition, the modules for this app are designed to take advantage of the features of MaxQuant outputs, such as the full-width at half-maximum of elution peaks outputted when selecting the “Calculate peak properties” option. Backwards Compatibility We are aware that older versions of MaxQuant have different column headers for some of the outputs. We provide an editable list of column “aliases” (in settings.yaml) where users can map their column names to the ones used in DO-MS. For example, DO-MS references the raw file column with Raw.file. If your data has Rawfile instead, this can be mapped: aliases: &#39;Raw.file&#39;: - Rawfile If you come across any discrepancies, please let the authors know by opening a GitHub issue. We want this software to be as smooth as possible, and would like to build in backwards-compatibility into the app. Other search engines Adapting the core module technology of this application to the output of other search engines can conceptually be carried out in two ways: Option 1: Convert output into MaxQuant-like files If you like the current modules and would like to keep their current display and features, the quickest strategy is to convert your search engine’s output into tab-delimited text that shares the same structure (i.e., column names) as MaxQuant’s output. This can be done via. our column aliasing system as mentioned above, with a third-party converter, or your own. Our application mainly uses six tab-delimited files from MaxQuant (for non-DIA searches): allPeptides, which describes ions on the MS1 level msmsScans, which describes MS2 scans msms, which describes PSMs evidence, which describes peptide-level data (combined PSMs) parameters, which describes MaxQuant search parameters summary, which summarizes search results per experiment These files are defined in settings.yaml: input_files: evidence: name: &#39;evidence&#39; file: &#39;evidence.txt&#39; help: &#39;MaxQuant evidence.txt file&#39; default_enabled: true msms: name: &#39;msms&#39; file: &#39;msms.txt&#39; help: &#39;MaxQuant msms.txt file&#39; default_enabled: true ... The base set of DO-MS modules reference MaxQuant files. As other search engines/pipelines have analogous files these definitions could be changed to accommodate that. Note that the column names also have to be taken into account. Option 2: Rewrite Modules Very little of the static, server code is dependent on the MaxQuant names. The core dependencies are: In server.R, much of the design around selecting, filtering on, and renaming raw files are hard-coded to recognize the “Raw.file” column of MaxQuant output. Simply ensure that your search engine output is outputting the raw file name in each file (most should), and then change the specific “Raw.file” reference in the server code. In global.R, the four files as described in Option 1 above are hardcoded into a list that is then displayed on the import page and available to all of the modules. Simply change the definitions here to the files you want to load from your search engine. There is no limit here, and the only restriction is, as described in point 1, the presence of a raw file column in the text file. All of the modules provided in the application here reference column names from MaxQuant output files and expect data in the form provided by MaxQuant. For other search engines, the column references may need to just be renamed, but for others they may need a major overhaul. Option 3: Write Your Own (recommended) If the base set of DO-MS modules is not useful to your analysis anyways (metabolomics, direct infusion, or other MS-related experiments), then you can simply write your own modules around your own data. See the building your own modules page for more details. Help! For assistance on performing the above points, please open an issue on our GitHub issues page to directly contact the developers.",
    "url": "http://localhost:4000/docs/other-search-engines",
    "relUrl": "/docs/other-search-engines"
  },
  "13": {
    "id": "13",
    "title": "Session Info",
    "content": "Session Info DO-MS is tested on Windows (7/8/10), OSX (10.14.1), and Linux (Ubuntu 14.04). Development sessions and package versions are listed below: R version 3.5.2 (2018-12-20) Platform: x86_64-apple-darwin15.6.0 (64-bit) Running under: macOS Mojave 10.14.1 Matrix products: default BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] argparse_2.0.0 knitr_1.21 bindrcpp_0.2.2 yaml_2.2.0 stringr_1.3.1 [6] DT_0.5 rmarkdown_1.11 readr_1.3.1 RColorBrewer_1.1-2 reshape2_1.4.3 [11] lattice_0.20-38 ggplot2_3.1.0 dplyr_0.7.8 shinyWidgets_0.4.4 shinydashboard_0.7.1 [16] pacman_0.5.0 shiny_1.2.0 loaded via a namespace (and not attached): [1] tidyselect_0.2.5 xfun_0.4 purrr_0.2.5 colorspace_1.4-0 getopt_1.20.2 htmltools_0.3.6 utf8_1.1.4 [8] rlang_0.3.1 later_0.7.5 pillar_1.3.1 glue_1.3.0 withr_2.1.2 bindr_0.1.1 plyr_1.8.4 [15] findpython_1.0.4 munsell_0.5.0 gtable_0.2.0 htmlwidgets_1.3 evaluate_0.12 labeling_0.3 httpuv_1.4.5.1 [22] crosstalk_1.0.0 fansi_0.4.0 highr_0.7 Rcpp_1.0.0 xtable_1.8-3 promises_1.0.1 scales_1.0.0 [29] jsonlite_1.6 mime_0.6 hms_0.4.2 digest_0.6.18 stringi_1.2.4 grid_3.5.2 cli_1.0.1 [36] tools_3.5.2 magrittr_1.5 lazyeval_0.2.1 tibble_2.0.1 crayon_1.3.4 pkgconfig_2.0.2 assertthat_0.2.0 [43] rstudioapi_0.9.0 R6_2.3.0 compiler_3.5.2",
    "url": "http://localhost:4000/docs/session-info",
    "relUrl": "/docs/session-info"
  }
  
}
