protein_df <-cbind(df)
protein_df$Precursor.Run.Id <- paste(protein_df$Precursor.Id.Old, protein_df$Run, sep='-')
protein_df$Precursor.Run.Id <- paste(protein_df$Precursor.Id.Old, protein_df$Run, sep='-')
protein_df <- merge(x = protein_df, y = report, by = "Precursor.Run.Id",  all.x = TRUE)
print(nrow(protein_df))
protein_df <- filter(protein_df, Proteotypic==1)
protein_df <- protein_df %>%
group_by(Id, Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
protein_df <- protein_df %>%
group_by(Id, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
protein_df <- filter(protein_df, !grepl('Neg', Celltype))
ggplot(protein_df, aes(x=Counts)) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Protein Copy Number', y='Number of Cells')+
xlim(0,60)
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
report$Precursor.Run.Id <- paste(report$Precursor.Id, report$Run, sep='-')
protein_df <-cbind(df)
protein_df <-cbind(df)
protein_df$Precursor.Run.Id <- paste(protein_df$Precursor.Id.Old, protein_df$Run, sep='-')
protein_df <- merge(x = protein_df, y = report, by = "Precursor.Run.Id",  all.x = TRUE)
print(nrow(protein_df))
protein_df <- filter(protein_df, Proteotypic==1)
protein_df <- protein_df %>%
group_by(Id, Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
protein_df <- protein_df %>%
group_by(Id, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
protein_df <- filter(protein_df, !grepl('Neg', Celltype))
ggplot(protein_df, aes(x=Counts)) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Protein Copy Number', y='Number of Cells')+
xlim(0,60)
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
if(label_occurences == 0){
return(.input_df)
}
for (column in columns) {
.input_df[[column]] = sapply(.input_df[[column]], .update_channel)
}
return(.input_df)
# Translates new (post 1.8.1 b12) channels to the old format
# Old Channels were denoted like (mTRAQ0) new ones are denoted like (mTRAQ-K-0)
translate_diann_channel_format <- function(.input_df, columns = c("Precursor.Id","Modified.Sequence")){
if (length(columns) < 1){
print('translate_diann_channel_format, no columns specified')
return(.input_df)
}
if (nrow(.input_df) < 1){
print('translate_diann_channel_format, dataframe is empty')
return(.input_df)
}
# check if channel is in old format
test_precursor <- .input_df[[columns[1]]][[1]]
label_occurences <- str_count(test_precursor, 'mTRAQ-[a-zA-Z]-')
if(label_occurences == 0){
return(.input_df)
}
for (column in columns) {
.input_df[[column]] = sapply(.input_df[[column]], .update_channel)
}
return(.input_df)
}
.get_channel <- function(sequence){
label = ''
for (channel in c('0','4','8')) {
mod = channel
if (grepl( mod, sequence, fixed = TRUE)){
label <- channel
}
}
return(label)
}
.lf_channel <- function(sequence){
sequence <- str_replace_all(sequence, paste0('\\(mTRAQ[0-9]\\)'), '')
return(sequence)
}
.get_sequence <- function(sequence){
sequence <- str_replace_all(sequence, paste0('[0-9]'), '')
return(sequence)
}
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn.tsv',guess_max=1e5))
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn.tsv',guess_max=1e5))
# calculate new columns like Label, Sequence etc. from the Precursor Id
sn$Precursor.Id.Old <- sn$Precursor.Id
sn <- translate_diann_channel_format(sn, columns = c('Precursor.Id'))
sn <- translate_diann_channel_format(sn, columns = c('Precursor.Id'))
sn$Precursor.Id.Labelfree <- sapply(sn$Precursor.Id, .lf_channel)
sn$Label <- sapply(sn$Precursor.Id, .get_channel)
sn$Precursor.Id.Labelfree <- sapply(sn$Precursor.Id, .lf_channel)
sn$Label <- sapply(sn$Precursor.Id, .get_channel)
sn$Sequence <- sapply(sn$Precursor.Id.Labelfree, .get_sequence)
sn$Id <- paste(sn$Run,sn$Label, sep='-')
# Load and merge metadata
meta <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/meta_JD_SC_02162022.tsv',guess_max=1e5))
meta$Id <- paste(meta$Raw,meta$Label, sep='-')
df <- merge(x = sn, y = meta, by = "Id", all = TRUE)
df <- filter(df, !(df$Set %in% c('X1','X2','X3','X4', 'X5','X6')))
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
peptide_df <- peptide_df %>%
group_by(Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
peptide_df <- filter(peptide_df, !grepl('Neg', Celltype))
peptide_df <- filter(peptide_df, !grepl('Neg', Celltype))
ggplot(peptide_df, aes(x=Counts)) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Peptide Copy Number', y='Number of Cells') +
xlim(0,60)
ggplot(peptide_df, aes(x=Counts)) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Peptide Copy Number', y='Number of Cells') +
#xlim(0,60)
ggplot(peptide_df, aes(x=Counts)) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Peptide Copy Number', y='Number of Cells')
ggplot(peptide_df, aes(x=Counts)) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Peptide Copy Number', y='Number of Cells')
ggplot(peptide_df, aes(x=log10(Counts))) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Peptide Copy Number', y='Number of Cells')
ggplot(peptide_df, aes(x=log10(Counts))) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Peptide Copy Number', y='Number of Peptides')
ggplot(peptide_df, aes(x=log10(Counts))) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')
xlim(0,4)
ggplot(peptide_df, aes(x=log10(Counts))) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0,4)
ggplot(peptide_df, aes(x=log10(Counts))) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=20, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0.5,4)
ggplot(peptide_df, aes(x=log10(Counts))) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=50, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0.5,4)
protein_df <- protein_df %>%
group_by(Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
# Load and merge report to get Protein groups
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
# Load and merge report to get Protein groups
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
report$Precursor.Run.Id <- paste(report$Precursor.Id, report$Run, sep='-')
protein_df <-cbind(df)
protein_df$Precursor.Run.Id <- paste(protein_df$Precursor.Id.Old, protein_df$Run, sep='-')
protein_df <- merge(x = protein_df, y = report, by = "Precursor.Run.Id",  all.x = TRUE)
# Create Protein copy number plot
protein_df <- filter(protein_df, Proteotypic==1)
protein_df <- protein_df %>%
group_by(Id, Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
protein_df <- protein_df %>%
group_by(Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
protein_df <- filter(protein_df, !grepl('Neg', Celltype))
ggplot(protein_df, aes(x=log10(Counts))) +
facet_wrap(~Celltype, nrow = 1, scales = "free_x") +
geom_histogram(bins=50, fill=custom_colors[[6]]) +
coord_flip() +
labs(x='Median Protein Copy Number', y='Number of Cells')+
xlim(0.5,4)
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Median Protein Copy Number', y='Number of Cells')+
xlim(0.5,4)
```{r fig1, fig.height = 3, fig.width = 5}
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Median Protein Copy Number', y='Number of Cells')+
xlim(0.5,4)
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Median Protein Copy Number', y='Number of Cells')+
xlim(0.5,4)
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Median Protein Copy Number', y='Number of Cells')+
xlim(0.5,4)
```{r fig1, fig.height = 2, fig.width = 2}
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Median Protein Copy Number', y='Number of Cells')+
xlim(0.5,4)
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0.5,4)
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0.5,4)
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0.5,4)
ggplot(peptide_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0.5,4)
# Translates new (post 1.8.1 b12) channels to the old format
# Old Channels were denoted like (mTRAQ0) new ones are denoted like (mTRAQ-K-0)
translate_diann_channel_format <- function(.input_df, columns = c("Precursor.Id","Modified.Sequence")){
if (length(columns) < 1){
print('translate_diann_channel_format, no columns specified')
return(.input_df)
}
if (nrow(.input_df) < 1){
print('translate_diann_channel_format, dataframe is empty')
return(.input_df)
}
# check if channel is in old format
test_precursor <- .input_df[[columns[1]]][[1]]
label_occurences <- str_count(test_precursor, 'mTRAQ-[a-zA-Z]-')
if(label_occurences == 0){
return(.input_df)
}
for (column in columns) {
.input_df[[column]] = sapply(.input_df[[column]], .update_channel)
}
return(.input_df)
}
.update_channel <- function(sequence){
groups <- str_match_all(sequence, "mTRAQ-([a-zA-Z])-([0-9]+)")
if (length(groups) > 0 ){
groups <- groups[[1]]
for(i in 1:nrow(groups)){
sequence <- str_replace_all(sequence, groups[i,1], paste0('mTRAQ',groups[i,3]))
}
}
return(sequence)
}
.get_channel <- function(sequence){
label = ''
for (channel in c('0','4','8')) {
mod = channel
if (grepl( mod, sequence, fixed = TRUE)){
label <- channel
}
}
return(label)
}
.get_sequence <- function(sequence){
sequence <- str_replace_all(sequence, paste0('[0-9]'), '')
return(sequence)
}
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new.tsv',guess_max=1e5))
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new.tsv',guess_max=1e5))
# calculate new columns like Label, Sequence etc. from the Precursor Id
sn$Precursor.Id.Old <- sn$Precursor.Id
sn <- translate_diann_channel_format(sn, columns = c('Precursor.Id'))
sn$Precursor.Id.Labelfree <- sapply(sn$Precursor.Id, .lf_channel)
sn$Label <- sapply(sn$Precursor.Id, .get_channel)
sn$Sequence <- sapply(sn$Precursor.Id.Labelfree, .get_sequence)
sn$Id <- paste(sn$Run,sn$Label, sep='-')
# Load and merge metadata
meta <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/meta_JD_SC_02162022.tsv',guess_max=1e5))
meta$Id <- paste(meta$Raw,meta$Label, sep='-')
df <- merge(x = sn, y = meta, by = "Id", all = TRUE)
df <- filter(df, !(df$Set %in% c('X1','X2','X3','X4', 'X5','X6')))
```{r fig1, fig.height = 2, fig.width = 2}
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
peptide_df <- peptide_df %>%
group_by(Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
peptide_df <- peptide_df %>%
group_by(Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
peptide_df <- filter(peptide_df, !grepl('Neg', Celltype))
ggplot(peptide_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0.5,4)
```{r fig1, fig.height = 2, fig.width = 2}
# Load and merge report to get Protein groups
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
# Load and merge report to get Protein groups
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
report$Precursor.Run.Id <- paste(report$Precursor.Id, report$Run, sep='-')
protein_df <-cbind(df)
protein_df$Precursor.Run.Id <- paste(protein_df$Precursor.Id.Old, protein_df$Run, sep='-')
protein_df <- merge(x = protein_df, y = report, by = "Precursor.Run.Id",  all.x = TRUE)
# Create Protein copy number plot
protein_df <- filter(protein_df, Proteotypic==1)
protein_df <- protein_df %>%
group_by(Id, Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
protein_df <- protein_df %>%
group_by(Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
protein_df <- filter(protein_df, !grepl('Neg', Celltype))
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0.5,4)
```{r fig.height = 2, fig.width = 2}
```{r fig1, fig.height = 2, fig.width = 2}
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
peptide_df <- peptide_df %>%
group_by(Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
peptide_df <- filter(peptide_df, !grepl('Neg', Celltype))
ggplot(peptide_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0.5,4)
ggplot(peptide_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0.5,4)+
title('top isotope')
ggplot(peptide_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0.5,4)+
ggtitle('top isotope')
# Load and merge report to get Protein groups
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
# Load and merge report to get Protein groups
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
report$Precursor.Run.Id <- paste(report$Precursor.Id, report$Run, sep='-')
protein_df <-cbind(df)
protein_df$Precursor.Run.Id <- paste(protein_df$Precursor.Id.Old, protein_df$Run, sep='-')
protein_df <- merge(x = protein_df, y = report, by = "Precursor.Run.Id",  all.x = TRUE)
# Create Protein copy number plot
protein_df <- filter(protein_df, Proteotypic==1)
protein_df <- protein_df %>%
group_by(Id, Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
protein_df <- protein_df %>%
group_by(Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
protein_df <- filter(protein_df, !grepl('Neg', Celltype))
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0.5,4) +
ggtitle('top isotope')
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0.5,4) +
ggtitle('top isotope')
ggplot(peptide_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0,4)+
ggtitle('top isotope')
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0,4) +
ggtitle('top isotope')
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new_all_isotopes.tsv',guess_max=1e5))
# calculate new columns like Label, Sequence etc. from the Precursor Id
sn$Precursor.Id.Old <- sn$Precursor.Id
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new_all_isotopes.tsv',guess_max=1e5))
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new_all_isotopes.tsv',guess_max=1e5))
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new_all_isotopes.tsv',guess_max=1e5))
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new_all_isotopes.tsv',guess_max=1e5))
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new_all_isotopes.tsv',guess_max=1e5))
# Load single cell copy numbers from tsv
sn <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/sn_new_all_isotopes.tsv',guess_max=1e5))
# calculate new columns like Label, Sequence etc. from the Precursor Id
sn$Precursor.Id.Old <- sn$Precursor.Id
sn <- translate_diann_channel_format(sn, columns = c('Precursor.Id'))
sn$Precursor.Id.Labelfree <- sapply(sn$Precursor.Id, .lf_channel)
sn$Label <- sapply(sn$Precursor.Id, .get_channel)
sn$Sequence <- sapply(sn$Precursor.Id.Labelfree, .get_sequence)
sn$Id <- paste(sn$Run,sn$Label, sep='-')
# Load and merge metadata
meta <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/meta_JD_SC_02162022.tsv',guess_max=1e5))
meta$Id <- paste(meta$Raw,meta$Label, sep='-')
df <- merge(x = sn, y = meta, by = "Id", all = TRUE)
df <- filter(df, !(df$Set %in% c('X1','X2','X3','X4', 'X5','X6')))
# Create peptide copy number distribution
peptide_df <- df %>%
group_by(Id, Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
peptide_df <- peptide_df %>%
group_by(Sequence, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
peptide_df <- filter(peptide_df, !grepl('Neg', Celltype))
ggplot(peptide_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0,4)+
ggtitle('top isotope')
# Load and merge report to get Protein groups
report <- as.data.frame(read_tsv(file='/Volumes/GoogleDrive/.shortcut-targets-by-id/1uQ4exoKlaZAGnOG1iCJPzYN3ooYYZB7g/MS/SCoPE/NUC/dat/multiDIA/beta16_scanrad5/wJD1146_1193_1200_1205_1cells/Report.tsv',guess_max=1e5))
report$Precursor.Run.Id <- paste(report$Precursor.Id, report$Run, sep='-')
protein_df <-cbind(df)
protein_df$Precursor.Run.Id <- paste(protein_df$Precursor.Id.Old, protein_df$Run, sep='-')
protein_df <- merge(x = protein_df, y = report, by = "Precursor.Run.Id",  all.x = TRUE)
# Create Protein copy number plot
protein_df <- filter(protein_df, Proteotypic==1)
protein_df <- protein_df %>%
group_by(Id, Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = sum(Extracted.Counts))
protein_df <- protein_df %>%
group_by(Protein.Ids, Celltype) %>%                            # multiple group columns
summarise(Counts = median(Counts))
protein_df <- filter(protein_df, !grepl('Neg', Celltype))
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0,4) +
ggtitle('top isotope')
ggplot(peptide_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='log10 Median Peptide Copy Number', y='Number of Peptides')+
xlim(0,4)+
ggtitle('all isotopes')
ggplot(protein_df, aes(x=log10(Counts), color = Celltype)) +
stat_bin(aes(y=..count..), bins=50,position = "identity",geom="step")+
coord_flip() +
labs(x='Log10 Median Protein Copy Number', y='Number of Proteins')+
xlim(0,4) +
ggtitle('all isotopes')
shiny::runApp()
shiny::runApp()
